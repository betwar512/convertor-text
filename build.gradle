buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

plugins {
    id 'java'
    id 'idea'
}
apply plugin: 'com.github.johnrengelman.shadow'
group 'net.contal'
version '1.3'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

test {
    useJUnitPlatform ()
}


dependencies {


    implementation group: 'com.itextpdf', name: 'itext7-core', version: '7.1.9', ext: 'pom'
    // https://mvnrepository.com/artifact/com.itextpdf/kernel
    implementation group: 'com.itextpdf', name: 'kernel', version: '7.1.9'
// https://mvnrepository.com/artifact/com.itextpdf/styled-xml-parser
    implementation group: 'com.itextpdf', name: 'styled-xml-parser', version: '7.1.9'
// https://mvnrepository.com/artifact/com.itextpdf/svg
    implementation group: 'com.itextpdf', name: 'svg', version: '7.1.9'
// https://mvnrepository.com/artifact/com.itextpdf/layout
    implementation group: 'com.itextpdf', name: 'layout', version: '7.1.9'
    // https://mvnrepository.com/artifact/com.itextpdf/forms
    implementation group: 'com.itextpdf', name: 'forms', version: '7.1.9'
    // https://mvnrepository.com/artifact/com.itextpdf/html2pdf
    implementation group: 'com.itextpdf', name: 'html2pdf', version: '2.1.6'
// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'

// https://mvnrepository.com/artifact/org.slf4j/slf4j-nop
    testImplementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.0-alpha1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

}


/*---------- Setup Tags Here for Live ----------*/

// get today
static def getDate() {
    new Date().format('yyyyMMdd')
}
// get last tag from master branch
static String getLatestTag(){
    return 'git describe --abbrev=0 origin/master'.execute().text
}
//Check if already in master branch
static boolean isMasterBranch(){
    String name =  'git rev-parse --abbrev-ref HEAD'.execute().text
    return name.replace("\n", "") == "master"
}

// Get current tag number ? 0
static int getTagNumber(){
    String lastTag = getLatestTag()
    int firstIndex = lastTag.indexOf("E")
    int  lastIndex = lastTag.indexOf("-")
    if(firstIndex > 0 && lastIndex > 0) {
        String dateTag = lastTag.substring(firstIndex + 1, lastIndex)
        String tagNumber =  getDate() == dateTag ? lastTag.substring(lastIndex+1) : "0"
        return tagNumber.toInteger()
    }
    return 0
}

/**
 * new tag with following pattern
 * Pattern = LIVEYYYYMMDD-number
 */
static def createNewLiveTag(){
    int tagNumber = getTagNumber() + 1
    return "LIVE" + getDate() + "-" + tagNumber
}


task getTag {
    doLast {
        String tagName =  createNewLiveTag()
        addTag(tagName)
//        println("Excude for JSERV:")
//        println("./test.sh -b jserv -t "+tagName+" -c -r -rm -lb 1")
//        println("Excude for Accounts:")
//        println("./test.sh -b accounts -t "+tagName+" -c -r -rm ")
    }
}


static  addTag(String tagName){
    if(!isMasterBranch()) {
        throw new IllegalStateException("You should checkout master branch before calling this task.")
    }

    if(tagName.length() > 0 ){


    }

}